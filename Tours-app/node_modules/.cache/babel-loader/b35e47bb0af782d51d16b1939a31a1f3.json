{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled, { ThemeProvider } from 'styled-components';\nvar VIEWBOX_WIDTH = 100;\nvar VIEWBOX_X1 = 0;\nvar VIEWBOX_X2 = 100;\nvar theme = {\n  base: {},\n  path: {\n    stroke: '#01a09e',\n    strokeLinecap: 'butt'\n  },\n  trail: {\n    stroke: '#d6d6d6',\n    strokeLinecap: 'butt'\n  },\n  text: {\n    fill: '#01a09e',\n    textAlign: 'center',\n    fontSize: '16px'\n  }\n};\n\nvar calculateSafeValue = function calculateSafeValue(_ref) {\n  var min = _ref.min,\n      max = _ref.max,\n      propValue = _ref.propValue;\n\n  if (propValue >= max) {\n    return max;\n  }\n\n  if (propValue <= min) {\n    return min;\n  }\n\n  if (propValue >= min || propValue <= max) {\n    return propValue;\n  }\n};\n\nfunction _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  width: 100%;\\n  display: block;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar StyledSvg = styled.svg(_templateObject());\n\nvar Svg = function Svg(_ref) {\n  var children = _ref.children,\n      strokeWidth = _ref.strokeWidth;\n  return /*#__PURE__*/React.createElement(StyledSvg, {\n    viewBox: \"0 0 \" + VIEWBOX_WIDTH + \" \" + strokeWidth\n  }, children);\n};\n\nSvg.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nfunction useStrokeDashOffset(_ref) {\n  var min = _ref.min,\n      value = _ref.value,\n      dashArray = _ref.dashArray;\n\n  var _React$useState = React.useState(min),\n      dashOffset = _React$useState[0],\n      setDashOffset = _React$useState[1];\n\n  React.useEffect(function () {\n    var dashOffset = Math.abs(dashArray - parseInt(value, 10));\n    setDashOffset(dashOffset);\n  }, [value, dashArray]);\n  return [dashOffset];\n}\n\nfunction usePath(_ref) {\n  var min = _ref.min,\n      max = _ref.max,\n      value = _ref.value,\n      strokeWidth = _ref.strokeWidth,\n      trailWidth = _ref.trailWidth,\n      flip = _ref.flip;\n\n  var _React$useState = React.useState(max),\n      dashArray = _React$useState[0],\n      setDashArray = _React$useState[1];\n\n  var _React$useState2 = React.useState(''),\n      draw = _React$useState2[0],\n      setDraw = _React$useState2[1];\n\n  var x1 = flip ? VIEWBOX_X2 : VIEWBOX_X1;\n  var x2 = flip ? VIEWBOX_X1 : VIEWBOX_X2;\n  React.useEffect(function () {\n    var center = (strokeWidth > trailWidth ? Math.max(strokeWidth, trailWidth) : Math.min(strokeWidth, trailWidth)) / 2;\n    setDraw(\"\\n      M \" + x1 + \",\" + center + \"\\n      L \" + x2 + \",\" + center + \"\\n    \");\n  }, [strokeWidth, trailWidth]);\n  var ref = React.useCallback(function (pathEl) {\n    if (pathEl !== null) {\n      setDashArray(pathEl.getTotalLength());\n    }\n  }, [draw]);\n  return [ref, draw, dashArray].concat(useStrokeDashOffset({\n    min: min,\n    max: max,\n    value: value,\n    dashArray: dashArray\n  }));\n}\n\nfunction _templateObject$1() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  stroke: \", \";\\n  stroke-linecap: \", \";\\n  stroke-dasharray: \", \";\\n  stroke-dashoffset: \", \";\\n\"]);\n\n  _templateObject$1 = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar StyledPath = styled.path(_templateObject$1(), function (_ref) {\n  var theme = _ref.theme,\n      trail = _ref.trail;\n  return trail ? theme.trail.stroke : theme.path.stroke;\n}, function (_ref2) {\n  var theme = _ref2.theme,\n      trail = _ref2.trail;\n  return trail ? theme.trail.strokeLinecap : theme.path.strokeLinecap;\n}, function (props) {\n  return props.strokeDashArray;\n}, function (props) {\n  return props.strokeDashOffset;\n});\n\nvar Path = function Path(_ref3) {\n  var value = _ref3.value,\n      min = _ref3.min,\n      max = _ref3.max,\n      strokeWidth = _ref3.strokeWidth,\n      trail = _ref3.trail,\n      trailWidth = _ref3.trailWidth,\n      flip = _ref3.flip;\n\n  var _usePath = usePath({\n    min: min,\n    max: max,\n    value: value,\n    strokeWidth: strokeWidth,\n    trailWidth: trailWidth,\n    flip: flip\n  }),\n      ref = _usePath[0],\n      draw = _usePath[1],\n      strokeDashArray = _usePath[2],\n      strokeDashOffset = _usePath[3];\n\n  var getStrokeWidth = React.useMemo(function () {\n    if (trail) {\n      return trailWidth >= strokeWidth ? strokeWidth : trailWidth;\n    }\n\n    return strokeWidth;\n  }, [trail, trailWidth, strokeWidth]);\n  return /*#__PURE__*/React.createElement(StyledPath, {\n    ref: ref,\n    d: draw,\n    strokeDashArray: strokeDashArray,\n    strokeDashOffset: strokeDashOffset,\n    strokeWidth: getStrokeWidth,\n    trail: trail\n  });\n};\n\nPath.defaultProps = {\n  strokeWidth: 2,\n  trailWidth: 2,\n  trail: false,\n  flip: false\n};\nPath.propTypes = {\n  strokeWidth: PropTypes.number,\n  trail: PropTypes.bool,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.PropTypes.number]),\n  flip: PropTypes.bool\n};\n\nfunction _templateObject$2() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  color: \", \";\\n  display: block;\\n  text-align: \", \";\\n  font-size: \", \";\\n\"]);\n\n  _templateObject$2 = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar StyledText = styled.span(_templateObject$2(), function (props) {\n  return props.theme.text.fill;\n}, function (props) {\n  return props.theme.text.textAlign;\n}, function (props) {\n  return props.theme.text.fontSize;\n});\n\nvar Text = function Text(_ref) {\n  var text = _ref.text,\n      value = _ref.value;\n  var renderText = text || Math.round(value) + \"%\";\n  return /*#__PURE__*/React.createElement(StyledText, null, renderText);\n};\n\nText.defaultProps = {\n  text: ''\n};\nText.propTypes = {\n  text: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  value: PropTypes.number\n};\n\nvar ProgressBarLine = function ProgressBarLine(_ref) {\n  var propValue = _ref.value,\n      min = _ref.min,\n      max = _ref.max,\n      strokeWidth = _ref.strokeWidth,\n      trailWidth = _ref.trailWidth,\n      text = _ref.text,\n      flip = _ref.flip,\n      styles = _ref.styles;\n\n  var _React$useState = React.useState(max),\n      value = _React$useState[0],\n      setValue = _React$useState[1];\n\n  React.useEffect(function () {\n    var safeValue = calculateSafeValue({\n      min: min,\n      max: max,\n      propValue: propValue\n    });\n    setValue((safeValue - min) * VIEWBOX_X2 / (max - min));\n  }, [propValue]);\n  var theme$1 = Object.assign({}, theme, styles);\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme$1\n  }, /*#__PURE__*/React.createElement(Text, {\n    text: text,\n    value: value\n  }), /*#__PURE__*/React.createElement(Svg, {\n    strokeWidth: strokeWidth\n  }, /*#__PURE__*/React.createElement(Path, {\n    trail: true,\n    value: VIEWBOX_X2,\n    min: min,\n    max: max,\n    strokeWidth: strokeWidth,\n    trailWidth: trailWidth\n  }), /*#__PURE__*/React.createElement(Path, {\n    value: value,\n    min: min,\n    max: max,\n    strokeWidth: strokeWidth,\n    trailWidth: trailWidth,\n    flip: flip\n  })));\n};\n\nProgressBarLine.defaultProps = {\n  value: 50,\n  min: 0,\n  max: 100,\n  strokeWidth: 5,\n  trailWidth: 5\n};\nProgressBarLine.propTypes = {\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.PropTypes.number]).isRequired,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  strokeWidth: PropTypes.number,\n  trailWidth: PropTypes.number\n};\nvar styles = {\n  \"test\": \"_3ybTi\"\n};\n\nvar ExampleComponent = function ExampleComponent(_ref) {\n  var text = _ref.text;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.test\n  }, text);\n};\n\nexport { ExampleComponent, ProgressBarLine };","map":{"version":3,"sources":["../src/constants.js","../src/config/theme.js","../src/utils.js","../src/components/Svg.js","../src/hooks/useStrokeDashOffset.js","../src/hooks/usePath.js","../src/components/Path.js","../src/components/Text.js","../src/components/ProgressBarLine.js","../src/index.js"],"names":["VIEWBOX_WIDTH","VIEWBOX_X1","VIEWBOX_X2","theme","base","path","stroke","strokeLinecap","trail","text","fill","textAlign","fontSize","calculateSafeValue","min","max","propValue","StyledSvg","styled","Svg","children","strokeWidth","PropTypes","isRequired","value","dashArray","dashOffset","setDashOffset","React","Math","parseInt","trailWidth","flip","setDashArray","draw","setDraw","x1","x2","center","ref","pathEl","useStrokeDashOffset","StyledPath","props","Path","strokeDashArray","strokeDashOffset","usePath","getStrokeWidth","bool","StyledText","Text","renderText","number","ProgressBarLine","styles","setValue","safeValue","Object","ExampleComponent","test"],"mappings":"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","sourcesContent":["export const VIEWBOX_WIDTH = 100\nexport const VIEWBOX_HEIGHT = 100\nexport const VIEWBOX_X1 = 0\nexport const VIEWBOX_X2 = 100\n","const theme = {\n  base: {},\n  path: {\n    stroke: '#01a09e',\n    strokeLinecap: 'butt'\n  },\n  trail: {\n    stroke: '#d6d6d6',\n    strokeLinecap: 'butt'\n  },\n  text: {\n    fill: '#01a09e',\n    textAlign: 'center',\n    fontSize: '16px'\n  }\n}\n\nexport default theme\n","export const calculateSafeValue = ({ min, max, propValue }) => {\n  if (propValue >= max) {\n    return max\n  }\n  if (propValue <= min) {\n    return min\n  }\n  if (propValue >= min || propValue <= max) {\n    return propValue\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nimport { VIEWBOX_WIDTH } from '../constants'\n\nconst StyledSvg = styled.svg`\n  width: 100%;\n  display: block;\n`\n\nconst Svg = ({ children, strokeWidth }) => {\n  return (\n    <StyledSvg viewBox={`0 0 ${VIEWBOX_WIDTH} ${strokeWidth}`}>\n      {children}\n    </StyledSvg>\n  )\n}\n\nSvg.propTypes = {\n  children: PropTypes.node.isRequired\n}\n\nexport default Svg\n","import React from 'react'\n\nexport default function useStrokeDashOffset({ min, value, dashArray }) {\n  const [dashOffset, setDashOffset] = React.useState(min)\n\n  React.useEffect(() => {\n    const dashOffset = Math.abs(dashArray - parseInt(value, 10))\n    setDashOffset(dashOffset)\n  }, [value, dashArray])\n\n  return [dashOffset]\n}\n","import React from 'react'\n\nimport useStrokeDashOffset from './useStrokeDashOffset'\n\nimport { VIEWBOX_X1, VIEWBOX_X2 } from '../constants'\n\nexport default function usePath({\n  min,\n  max,\n  value,\n  strokeWidth,\n  trailWidth,\n  flip\n}) {\n  const [dashArray, setDashArray] = React.useState(max)\n  const [draw, setDraw] = React.useState('')\n\n  const x1 = flip ? VIEWBOX_X2 : VIEWBOX_X1\n  const x2 = flip ? VIEWBOX_X1 : VIEWBOX_X2\n\n  React.useEffect(() => {\n    const center =\n      (strokeWidth > trailWidth\n        ? Math.max(strokeWidth, trailWidth)\n        : Math.min(strokeWidth, trailWidth)) / 2\n\n    setDraw(`\n      M ${x1},${center}\n      L ${x2},${center}\n    `)\n  }, [strokeWidth, trailWidth])\n\n  const ref = React.useCallback(\n    (pathEl) => {\n      if (pathEl !== null) {\n        setDashArray(pathEl.getTotalLength())\n      }\n    },\n    [draw]\n  )\n\n  return [\n    ref,\n    draw,\n    dashArray,\n    ...useStrokeDashOffset({ min, max, value, dashArray })\n  ]\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nimport usePath from '../hooks/usePath'\n\nconst StyledPath = styled.path`\n  stroke: ${({ theme, trail }) =>\n    trail ? theme.trail.stroke : theme.path.stroke};\n  stroke-linecap: ${({ theme, trail }) =>\n    trail ? theme.trail.strokeLinecap : theme.path.strokeLinecap};\n  stroke-dasharray: ${(props) => props.strokeDashArray};\n  stroke-dashoffset: ${(props) => props.strokeDashOffset};\n`\n\nconst Path = ({ value, min, max, strokeWidth, trail, trailWidth, flip }) => {\n  const [ref, draw, strokeDashArray, strokeDashOffset] = usePath({\n    min,\n    max,\n    value,\n    strokeWidth,\n    trailWidth,\n    flip\n  })\n\n  const getStrokeWidth = React.useMemo(() => {\n    if (trail) {\n      return trailWidth >= strokeWidth ? strokeWidth : trailWidth\n    }\n    return strokeWidth\n  }, [trail, trailWidth, strokeWidth])\n\n  return (\n    <StyledPath\n      ref={ref}\n      d={draw}\n      strokeDashArray={strokeDashArray}\n      strokeDashOffset={strokeDashOffset}\n      strokeWidth={getStrokeWidth}\n      trail={trail}\n    />\n  )\n}\n\nPath.defaultProps = {\n  strokeWidth: 2,\n  trailWidth: 2,\n  trail: false,\n  flip: false\n}\n\nPath.propTypes = {\n  strokeWidth: PropTypes.number,\n  trail: PropTypes.bool,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.PropTypes.number]),\n  flip: PropTypes.bool\n}\n\nexport default Path\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nconst StyledText = styled.span`\n  color: ${(props) => props.theme.text.fill};\n  display: block;\n  text-align: ${(props) => props.theme.text.textAlign};\n  font-size: ${(props) => props.theme.text.fontSize};\n`\n\nconst Text = ({ text, value }) => {\n  const renderText = text || `${Math.round(value)}%`\n\n  return <StyledText>{renderText}</StyledText>\n}\n\nText.defaultProps = {\n  text: ''\n}\n\nText.propTypes = {\n  text: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  value: PropTypes.number\n}\n\nexport default Text\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { ThemeProvider } from 'styled-components'\n\nimport { VIEWBOX_X2 } from '../constants'\n\nimport baseStyles from '../config/theme'\nimport { calculateSafeValue } from '../utils'\n\nimport Svg from './Svg'\nimport Path from './Path'\nimport Text from './Text'\n\nconst ProgressBarLine = ({\n  value: propValue,\n  min,\n  max,\n  strokeWidth,\n  trailWidth,\n  text,\n  flip,\n  styles\n}) => {\n  const [value, setValue] = React.useState(max)\n\n  React.useEffect(() => {\n    const safeValue = calculateSafeValue({ min, max, propValue })\n    setValue(((safeValue - min) * VIEWBOX_X2) / (max - min))\n  }, [propValue])\n\n  const theme = Object.assign({}, baseStyles, styles)\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Text text={text} value={value} />\n      <Svg strokeWidth={strokeWidth}>\n        <Path\n          trail\n          value={VIEWBOX_X2}\n          min={min}\n          max={max}\n          strokeWidth={strokeWidth}\n          trailWidth={trailWidth}\n        />\n        <Path\n          value={value}\n          min={min}\n          max={max}\n          strokeWidth={strokeWidth}\n          trailWidth={trailWidth}\n          flip={flip}\n        />\n      </Svg>\n    </ThemeProvider>\n  )\n}\n\nProgressBarLine.defaultProps = {\n  value: 50,\n  min: 0,\n  max: 100,\n  strokeWidth: 5,\n  trailWidth: 5\n}\n\nProgressBarLine.propTypes = {\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.PropTypes.number])\n    .isRequired,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  strokeWidth: PropTypes.number,\n  trailWidth: PropTypes.number\n}\n\nexport default ProgressBarLine\n","import React from 'react'\n\nimport ProgressBarLine from './components/ProgressBarLine'\n\nimport styles from './styles.module.css'\n\nexport const ExampleComponent = ({ text }) => {\n  return <div className={styles.test}>{text}</div>\n}\n\nexport { ProgressBarLine }\n"]},"metadata":{},"sourceType":"module"}