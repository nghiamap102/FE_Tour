function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var PropTypes = _interopDefault(require('prop-types'));
var styled = require('styled-components');
var styled__default = _interopDefault(styled);

var VIEWBOX_WIDTH = 100;
var VIEWBOX_X1 = 0;
var VIEWBOX_X2 = 100;

var theme = {
  base: {},
  path: {
    stroke: '#01a09e',
    strokeLinecap: 'butt'
  },
  trail: {
    stroke: '#d6d6d6',
    strokeLinecap: 'butt'
  },
  text: {
    fill: '#01a09e',
    textAlign: 'center',
    fontSize: '16px'
  }
};

var calculateSafeValue = function calculateSafeValue(_ref) {
  var min = _ref.min,
      max = _ref.max,
      propValue = _ref.propValue;

  if (propValue >= max) {
    return max;
  }

  if (propValue <= min) {
    return min;
  }

  if (propValue >= min || propValue <= max) {
    return propValue;
  }
};

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n  width: 100%;\n  display: block;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}
var StyledSvg = styled__default.svg(_templateObject());

var Svg = function Svg(_ref) {
  var children = _ref.children,
      strokeWidth = _ref.strokeWidth;
  return /*#__PURE__*/React.createElement(StyledSvg, {
    viewBox: "0 0 " + VIEWBOX_WIDTH + " " + strokeWidth
  }, children);
};

Svg.propTypes = {
  children: PropTypes.node.isRequired
};

function useStrokeDashOffset(_ref) {
  var min = _ref.min,
      value = _ref.value,
      dashArray = _ref.dashArray;

  var _React$useState = React.useState(min),
      dashOffset = _React$useState[0],
      setDashOffset = _React$useState[1];

  React.useEffect(function () {
    var dashOffset = Math.abs(dashArray - parseInt(value, 10));
    setDashOffset(dashOffset);
  }, [value, dashArray]);
  return [dashOffset];
}

function usePath(_ref) {
  var min = _ref.min,
      max = _ref.max,
      value = _ref.value,
      strokeWidth = _ref.strokeWidth,
      trailWidth = _ref.trailWidth,
      flip = _ref.flip;

  var _React$useState = React.useState(max),
      dashArray = _React$useState[0],
      setDashArray = _React$useState[1];

  var _React$useState2 = React.useState(''),
      draw = _React$useState2[0],
      setDraw = _React$useState2[1];

  var x1 = flip ? VIEWBOX_X2 : VIEWBOX_X1;
  var x2 = flip ? VIEWBOX_X1 : VIEWBOX_X2;
  React.useEffect(function () {
    var center = (strokeWidth > trailWidth ? Math.max(strokeWidth, trailWidth) : Math.min(strokeWidth, trailWidth)) / 2;
    setDraw("\n      M " + x1 + "," + center + "\n      L " + x2 + "," + center + "\n    ");
  }, [strokeWidth, trailWidth]);
  var ref = React.useCallback(function (pathEl) {
    if (pathEl !== null) {
      setDashArray(pathEl.getTotalLength());
    }
  }, [draw]);
  return [ref, draw, dashArray].concat(useStrokeDashOffset({
    min: min,
    max: max,
    value: value,
    dashArray: dashArray
  }));
}

function _templateObject$1() {
  var data = _taggedTemplateLiteralLoose(["\n  stroke: ", ";\n  stroke-linecap: ", ";\n  stroke-dasharray: ", ";\n  stroke-dashoffset: ", ";\n"]);

  _templateObject$1 = function _templateObject() {
    return data;
  };

  return data;
}
var StyledPath = styled__default.path(_templateObject$1(), function (_ref) {
  var theme = _ref.theme,
      trail = _ref.trail;
  return trail ? theme.trail.stroke : theme.path.stroke;
}, function (_ref2) {
  var theme = _ref2.theme,
      trail = _ref2.trail;
  return trail ? theme.trail.strokeLinecap : theme.path.strokeLinecap;
}, function (props) {
  return props.strokeDashArray;
}, function (props) {
  return props.strokeDashOffset;
});

var Path = function Path(_ref3) {
  var value = _ref3.value,
      min = _ref3.min,
      max = _ref3.max,
      strokeWidth = _ref3.strokeWidth,
      trail = _ref3.trail,
      trailWidth = _ref3.trailWidth,
      flip = _ref3.flip;

  var _usePath = usePath({
    min: min,
    max: max,
    value: value,
    strokeWidth: strokeWidth,
    trailWidth: trailWidth,
    flip: flip
  }),
      ref = _usePath[0],
      draw = _usePath[1],
      strokeDashArray = _usePath[2],
      strokeDashOffset = _usePath[3];

  var getStrokeWidth = React.useMemo(function () {
    if (trail) {
      return trailWidth >= strokeWidth ? strokeWidth : trailWidth;
    }

    return strokeWidth;
  }, [trail, trailWidth, strokeWidth]);
  return /*#__PURE__*/React.createElement(StyledPath, {
    ref: ref,
    d: draw,
    strokeDashArray: strokeDashArray,
    strokeDashOffset: strokeDashOffset,
    strokeWidth: getStrokeWidth,
    trail: trail
  });
};

Path.defaultProps = {
  strokeWidth: 2,
  trailWidth: 2,
  trail: false,
  flip: false
};
Path.propTypes = {
  strokeWidth: PropTypes.number,
  trail: PropTypes.bool,
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.PropTypes.number]),
  flip: PropTypes.bool
};

function _templateObject$2() {
  var data = _taggedTemplateLiteralLoose(["\n  color: ", ";\n  display: block;\n  text-align: ", ";\n  font-size: ", ";\n"]);

  _templateObject$2 = function _templateObject() {
    return data;
  };

  return data;
}
var StyledText = styled__default.span(_templateObject$2(), function (props) {
  return props.theme.text.fill;
}, function (props) {
  return props.theme.text.textAlign;
}, function (props) {
  return props.theme.text.fontSize;
});

var Text = function Text(_ref) {
  var text = _ref.text,
      value = _ref.value;
  var renderText = text || Math.round(value) + "%";
  return /*#__PURE__*/React.createElement(StyledText, null, renderText);
};

Text.defaultProps = {
  text: ''
};
Text.propTypes = {
  text: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  value: PropTypes.number
};

var ProgressBarLine = function ProgressBarLine(_ref) {
  var propValue = _ref.value,
      min = _ref.min,
      max = _ref.max,
      strokeWidth = _ref.strokeWidth,
      trailWidth = _ref.trailWidth,
      text = _ref.text,
      flip = _ref.flip,
      styles = _ref.styles;

  var _React$useState = React.useState(max),
      value = _React$useState[0],
      setValue = _React$useState[1];

  React.useEffect(function () {
    var safeValue = calculateSafeValue({
      min: min,
      max: max,
      propValue: propValue
    });
    setValue((safeValue - min) * VIEWBOX_X2 / (max - min));
  }, [propValue]);
  var theme$1 = Object.assign({}, theme, styles);
  return /*#__PURE__*/React.createElement(styled.ThemeProvider, {
    theme: theme$1
  }, /*#__PURE__*/React.createElement(Text, {
    text: text,
    value: value
  }), /*#__PURE__*/React.createElement(Svg, {
    strokeWidth: strokeWidth
  }, /*#__PURE__*/React.createElement(Path, {
    trail: true,
    value: VIEWBOX_X2,
    min: min,
    max: max,
    strokeWidth: strokeWidth,
    trailWidth: trailWidth
  }), /*#__PURE__*/React.createElement(Path, {
    value: value,
    min: min,
    max: max,
    strokeWidth: strokeWidth,
    trailWidth: trailWidth,
    flip: flip
  })));
};

ProgressBarLine.defaultProps = {
  value: 50,
  min: 0,
  max: 100,
  strokeWidth: 5,
  trailWidth: 5
};
ProgressBarLine.propTypes = {
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.PropTypes.number]).isRequired,
  min: PropTypes.number,
  max: PropTypes.number,
  strokeWidth: PropTypes.number,
  trailWidth: PropTypes.number
};

var styles = {"test":"_3ybTi"};

var ExampleComponent = function ExampleComponent(_ref) {
  var text = _ref.text;
  return /*#__PURE__*/React.createElement("div", {
    className: styles.test
  }, text);
};

exports.ExampleComponent = ExampleComponent;
exports.ProgressBarLine = ProgressBarLine;
//# sourceMappingURL=index.js.map
